Attribute VB_Name = "modGame"
Option Explicit

Const PROCESS_ALL_ACCESS& = &H1F0FFF
Const STILL_ACTIVE& = &H103&
Const INFINITE& = &HFFFF
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
Private Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal hProcess As Long, lpExitCode As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

Public Type GameData
    Name As String
    IconPath As String
    'Icon As Picture
    EXEPath As String
    GameEXE As String 'I should do a 64bit one, too.. but I'll just add separate games for 32bit fags.
    MonitorRunning As Boolean
    MonitorEXE As String
    CommandArgs As String
    GameUID As String
    InstallFirst As Boolean
    InstallerPath As String
    Installed As Boolean
    GameType As Integer
    'ConfigFile As String
    'UserNameField As String
    'UserNameConfigMethod As Integer

End Type

Public GameFile As String
Public CurrentGameIndex As Integer

Public Game() As GameData

Public Sub SaveGames()
Dim strGames As String
Dim i As Integer

AddToString "// Games file generated by LanParty v" & GetAppVersion & " by Dragoon //", strGames
AddToString "", strGames
'write addl information regarding how to write a game config entry.

        AddToString "//Name <Name Of The Game, Obviously>", strGames
        AddToString "//IconPath <Path to JPG/PNG/BMP/ICO/EXE/ETC. Should pull Icons out of EXEs. Should.>", strGames
        AddToString "//EXEPath <Path To GameEXE, NOT INCLUDING IT!>", strGames
        AddToString "//GameEXE <Actual Game EXE File>", strGames
        AddToString "//CommandArgs <Command Arguments For The Launch EXE>", strGames
        AddToString "// CMD Args - Automatically replaced: %SCREENX%, %SCREENY%, %TIME, %DATE%, %USERNAME%", strGames
        AddToString "//MonitorRunning <True/False>", strGames
        AddToString "//MonitorEXE <EXEName if different than GameEXE>", strGames
        AddToString "//GameUID <Generated by LanParty>", strGames
        'AddToString "//Installed <Generated from EXE>", strGames
        AddToString "//InstallerPath <Path To Installer EXE, relative>", strGames
        AddToString "//InstallFirst <True/False>", strGames
        AddToString "//GameType <0=Normal game/1=Non-game command, ie: ""EXPLORER http://google.com"" (opens Google)>", strGames
        'AddToString "//ConfigFile <PathToGameConfigFile_RELATIVE>", strGames
        'AddToString "//UserNameField <UserNameField in ConfigFile>", strGames
        'AddToString "//UserNameConfigMethod 0-X", strGames
        AddToString "", strGames

For i = 1 To UBound(Game)
    With Game(i)
        If LenB(Game(i).GameEXE) > 0 Then
            AddToString "Name " & .Name, strGames
            AddToString "IconPath " & .IconPath, strGames
            AddToString "EXEPath " & .EXEPath, strGames
            AddToString "GameEXE " & .GameEXE, strGames
            AddToString "CommandArgs " & .CommandArgs, strGames
            AddToString "MonitorRunning " & .MonitorRunning, strGames
            AddToString "MonitorEXE " & .MonitorEXE, strGames
            If Len(.GameUID$) = 0 Then
                .GameUID = CalcGameUID(i)
            End If
            AddToString "GameUID " & .GameUID, strGames
            AddToString "InstallFirst " & .InstallFirst, strGames
            AddToString "InstallerPath " & .InstallerPath, strGames
            AddToString "GameType " & .GameType, strGames
            'AddToString "ConfigFile " & .ConfigFile, strGames
            'AddToString "UserNameField " & .UserNameField, strGames
            'AddToString "UserNameConfigMethod " & .UserNameConfigMethod, strGames
            AddToString "", strGames
        End If
    End With
Next

AddToString "// Settings file generated on " & IIf(IsHost64Bit, "64-bit", "32-bit") & " " & NativeGetVersion & " //", strGames
FileCopy GameFile, GameFile & ".bak"
WriteFile strGames, GameFile, True

End Sub

Public Sub InitializeGameArray()
Dim strGames As String
Dim lines() As String
Dim GameIndex As Integer
ReDim Game(0)
AddDebug "InitGameArray"
GameFile = App.Path & "\Games.txt"

strGames = LoadFile(GameFile)
'ReDim Game(1)
'With Game(1)
'    .CommandArgs = vbNullString
'    .ConfigFile = vbNullString
'    .EXEPath = ""
'    .GameEXE = ""
'    .IconPath = "F:\Dropbox\Programming\LanParty\New folder (3)\Public.bas"
'    '.Icon = GetGamePicture(.IconPath)
'    .MonitorRunning = True
'    .Name = "Game 1"
'    .UserNameConfigMethod = 1
'    .UserNameField = "UserName"
'End With

If LenB(strGames) > 1 Then

lines = Split(strGames, vbNewLine)

If UBound(lines) > 1 Then
    Dim i As Long
    Dim Line As String
    Dim strSwitch As String
    Dim strData As String
    For i = 0 To UBound(lines)
        Line = Trim$(lines(i))
        
        If Not Left$(Line, 2) = "//" Then 'Next 'skip comments
            If Not LenB(Line) < 1 Then
                strSwitch = LCase$(Split(Line, " ")(0))
                strData = Trim$(Right$(Line, Len(Line) - Len(strSwitch)))
                
                Select Case strSwitch
                
                Case "name"
                GameIndex = GameIndex + 1
                
                'redim the array. Redim preserve is super slow, unfortunately. I could write a value in the file that would be read
                'before everything else and use that to initialize the array, but it's not a probelm for a few games at a time..
                ReDim Preserve Game(GameIndex)
                Game(GameIndex).Name = strData
                
                Case "commandargs"
                Game(GameIndex).CommandArgs = strData
                
                Case "gameexe"
                Game(GameIndex).GameEXE = strData
                
                Case "gameuid"
                Game(GameIndex).GameUID = strData
                
                Case "exepath"
                Game(GameIndex).EXEPath = strData
                
                Case "monitorrunning"
                Game(GameIndex).MonitorRunning = IIf(LCase$(strData) = "true", True, False)
                
                Case "monitorexe"
                Game(GameIndex).MonitorEXE = strData
                
                'Case "configfile"
                'Game(GameIndex).ConfigFile = strData
                
                Case "iconpath"
                Game(GameIndex).IconPath = strData
                
                Case "installerpath"
                Game(GameIndex).InstallerPath = strData
                
                Case "installfirst"
                Game(GameIndex).InstallFirst = IIf(LCase$(strData) = "true", True, False)

                Case "gametype"
                Game(GameIndex).GameType = CInt(strData)

                'Case "usernameconfigmethod"
                'Game(GameIndex).UserNameConfigMethod = CInt(strData)
                
                'Case "usernamefield"
                'Game(GameIndex).UserNameField = strData
                
                Case Else
                    AddDebug "Unknown case: " & Line, True
                
                End Select
            End If
        End If
    Next i
End If


End If

'check for valid username.
If LenB(Settings.UserName$) = 0 Then frmSettings.Show vbModal
'AddDebug "InitGameArray [DONE]"
End Sub

Public Function LaunchGame(Optional GameIndex As Integer, Optional WithArgs As Boolean = True) As Long
If GameIndex = 0 Then GameIndex = CurrentGameIndex

If Game(GameIndex).GameType = 1 Then
    ExecFile Game(GameIndex).GameEXE, GetGameArgs(GameIndex), , Game(GameIndex).EXEPath
    CheckMonitorGame GameIndex
Exit Function
End If

If Game(GameIndex).InstallFirst Then
    If Game(GameIndex).Installed = False Then
        'needs to install the game first
        MsgBox "This game must be installed before launching." & vbNewLine & _
        "If you've installed it already, right click its icon and choose ""Locate Game""", vbExclamation, "Installation Required"
        Exit Function
    Else
        
        If Not FileExists(GetGameExePath(GameIndex)) Then
            MsgBox "This game must be installed before launching." & vbNewLine & _
        "If you've installed it already, right click its icon and choose ""Locate Game""", vbExclamation, "Unable To Locate Game"
        End If
    End If
End If

TrySetGamePath GameIndex

    Dim GamePath As String
    GamePath = GetGameExePath(GameIndex)
    
    If LenB(GamePath$) = 0 Then AddDebug "LaunchGame: GamePath is null":  Exit Function
    If WithArgs Then
        LaunchGame = ExecFile(GamePath, GetGameArgs(GameIndex), , Game(GameIndex).EXEPath)
    Else
        LaunchGame = ExecFile(GamePath, "", , Game(GameIndex).EXEPath)
    End If
    
    DoEvents
    
    If LaunchGame >= 32 Then If Settings.MinimizeAfterLaunch Then frmMain.WindowState = vbMinimized
    
    CheckMonitorGame GameIndex
    
    'AddDebug "LaunchGame: " & LaunchGame, True
End Function

Private Function TrySetGamePath(GameIndex As Integer)
    On Error GoTo oops
    
    ChDir FullPathFromLocal(Game(GameIndex).EXEPath)
    AddDebug "Changing WorkingDir to: " & FullPathFromLocal(Game(GameIndex).EXEPath)
    Exit Function
    
oops:
    AddDebug "Unable to change WorkingDir to: " & FullPathFromLocal(Game(GameIndex).EXEPath)
    
End Function

Public Function StoppedPlaying(GameIndex As Integer)
'broadcast stopped playing
'also anything else
CryptToAll NowPlayingPacket(0, Game(GameIndex).GameUID)
AddUserChat "You've stopped playing: " & Game(GameIndex).Name, "System", False
Settings.CurrentGame = 0
End Function

Public Function StartedPlaying(GameIndex As Integer)
'broadcast started playing game
If IsGameRunning(GameIndex) Then
    Settings.CurrentGame = GameIndex
    AddUserChat "You've started playing: " & Game(GameIndex).Name, "System", False
    CryptToAll NowPlayingPacket(1, Game(GameIndex).GameUID)
Else
    AddDebug "Unable to locate GameEXE: " & Game(GameIndex).GameEXE
End If

End Function

Public Function CheckMonitorGame(Optional GameIndex As Integer = 0)

If Settings.MonitorGame = False Then
    If Settings.CurrentGame > 0 Then StoppedPlaying Settings.CurrentGame
    Exit Function
End If

If GameIndex = 0 And Settings.CurrentGame = 0 Then 'if index is 0 and current game is 0

    Dim i As Integer
    For i = 1 To UBound(Game)
        If IsGameRunning(i) Then CheckMonitorGame (i): Exit Function
    Next i

    'Exit Function 'gtfo
End If

If GameIndex > 0 Then 'GameIndex = Settings.CurrentGame
    If Game(GameIndex).MonitorRunning = False Then 'if index > 0, but don't monitor exe..
        Exit Function 'gtfo
    End If
Else
    If Game(Settings.CurrentGame).MonitorRunning = False Then 'if index > 0, but don't monitor exe..
        Exit Function 'gtfo
    End If
End If

If Settings.CurrentGame = 0 Then
    'One is not running currently,
    'so it will be a new launch
    
    StartedPlaying GameIndex
    
Exit Function
End If

If Settings.CurrentGame = GameIndex Then
    'Same game is running.
    
    If IsGameRunning(GameIndex) Then
    
    Else
        StoppedPlaying GameIndex
    End If
Exit Function
End If

If IsGameRunning(Settings.CurrentGame) Then
    'we're launching a new game.. but our last game is running?
    If GameIndex > 0 Then
        StoppedPlaying Settings.CurrentGame
        StartedPlaying GameIndex
        Exit Function
    Else
        'The game is still running!
    End If
        
Else
    'Our last game isn't running, and we're launching a new game.
    StoppedPlaying Settings.CurrentGame
    If GameIndex > 0 Then StartedPlaying GameIndex
End If


End Function

Public Function GetGameExePath(GameIndex As Integer) As String
If GameIndex = -1 Then Exit Function
    If Len(Game(GameIndex).EXEPath$) > 0 Then
        GetGameExePath = FixFilePath(Game(GameIndex).EXEPath & "\" & Game(GameIndex).GameEXE)
    Else
        GetGameExePath = FixFilePath(Game(GameIndex).GameEXE)
    End If
End Function

Public Function GetGameArgs(GameIndex As Integer) As String
If GameIndex = -1 Then Exit Function
    If Len(Game(GameIndex).CommandArgs) > 0 Then
        GetGameArgs = FixCmdArgs(Game(GameIndex).CommandArgs)
    End If
End Function

Public Function GetGameName(GameIndex As Integer) As String
    On Error Resume Next
    
    If GameIndex = -1 Then
        GetGameName = "Unknown Game"
        Exit Function
    End If
    
    GetGameName = Game(GameIndex).Name
End Function

Public Function CalcGameUID(GameIndex As Integer, Optional blForce As Boolean = False) As String

    If Not blForce Then If Len(Game(GameIndex).GameUID) > 0 Then CalcGameUID = Game(GameIndex).GameUID: Exit Function

    If blForce Then AddDebug "Force calculating GameUID.."

    If FileExists(GetGameExePath(GameIndex)) Then
        CalcGameUID = CalculateAdler(CRC32File(GetGameExePath(GameIndex)) & Game(GameIndex).Name)
    End If
    
End Function

Public Function GameIndexByUID(GameUID As String) As Integer
    Dim i As Integer
    For i = 1 To UBound(Game)
        If (Len(Game(i).GameUID) > 0) And Game(i).GameUID = GameUID Then
            GameIndexByUID = i
            Exit Function
        End If
    Next i
    
    GameIndexByUID = -1
    
End Function

Public Function IsGameRunning(GameIndex As Integer) As Boolean
Dim strGame() As String

Dim cproc As clsProcess
Set cproc = New clsProcess

strGame = Split(Game(GameIndex).MonitorEXE, ";")

If UBound(strGame) > 0 Then

    Dim i As Integer
    
    For i = 0 To UBound(strGame)
        strGame(i) = Trim$(strGame(i))
        If Len(strGame(i)) > 0 Then
            If cproc.ProcessExists(strGame(i)) Then IsGameRunning = True: Exit Function
        End If
    Next i


Else
    IsGameRunning = cproc.ProcessExists(Game(GameIndex).MonitorEXE)
End If


    

End Function

Public Function CheckInstalled()

    Dim i As Integer
    For i = 1 To UBound(Game)
        If Game(i).InstallFirst Then
            If FileExists(GetGameExePath(i)) Then
                Game(i).Installed = True
            Else
                Game(i).Installed = False
                AddDebug "Game: " & GetGameName(i) & " not found installed."
            End If
        End If
    Next i

End Function

Public Function InstallGame(GameIndex As Integer) As Boolean
Dim idProg As Long, iExit As Long

If Len(Game(GameIndex).InstallerPath$) = 0 Then AddUserChat "InstallerPath is null.", "System", False: Exit Function

Dim strPath As String
strPath = FixFilePath(Game(GameIndex).InstallerPath)

If Not FileExists(strPath) Then AddUserChat "InstallerPath cannot be located.", "System", False: Exit Function



idProg = Shell(strPath)
iExit = fWait(idProg)

InstallGame = iExit

If FileExists(GetGameExePath(GameIndex)) Then
    Game(GameIndex).Installed = iExit
Else
    LocateGame GameIndex
End If
'CheckInstalled

End Function

Public Sub LocateGame(GameIndex As Integer)
'on error resume next
Dim f As New frmLocateGame
Load f
f.Tag = GameIndex
f.Caption = "Locate Game - " & Game(GameIndex).Name
'f.LocateGame GameIndex
f.SetSearchFile Game(GameIndex).GameEXE
f.Show vbModal
If FileExists(GetGameExePath(GameIndex)) Then Game(GameIndex).Installed = True
Unload f

End Sub

Function fWait(ByVal lProgID As Long) As Long
Dim lExitCode As Long, hdlProg As Long
hdlProg = OpenProcess(PROCESS_ALL_ACCESS, False, lProgID)
GetExitCodeProcess hdlProg, lExitCode
Do While lExitCode = STILL_ACTIVE&
DoEvents
GetExitCodeProcess hdlProg, lExitCode
Loop
CloseHandle hdlProg
fWait = lExitCode
End Function
