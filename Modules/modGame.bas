Attribute VB_Name = "modGame"
Option Explicit

Const PROCESS_ALL_ACCESS& = &H1F0FFF
Const STILL_ACTIVE& = &H103&
Const INFINITE& = &HFFFF
Private Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
Private Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal hProcess As Long, lpExitCode As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

Public Type GameData
    Name As String
    IconPath As String
    'Icon As Picture
    EXEPath As String
    GameEXE As String
    'GameEXE64Bit As String
    MonitorRunning As Boolean
    MonitorEXE As String
    CommandArgs As String
    GameUID As String
    InstallFirst As Boolean
    InstallerPath As String
    Installed As Boolean
    GameType As Integer
    MaxPlayers As Integer
    GameExists As Boolean
    GameScript As String
    'ConfigFile As String
    'UserNameField As String
    'UserNameConfigMethod As Integer

End Type

Public GameFile As String
Public CurrentGameIndex As Integer

Public Game() As GameData

Public Sub SaveGames(Optional IndexOnly As Integer = -1)
Dim strGames As String
Dim strFilePath As String
Dim i As Integer

If IndexOnly = -1 Then

    AddToString "// Games file generated by LanParty v" & GetAppVersion & " //", strGames
    AddToString "", strGames
    'write addl information regarding how to write a game config entry.

    AddToString "//Name <Name Of The Game, Obviously>", strGames
    AddToString "//IconPath <Path to JPG/PNG/BMP/ICO/EXE/ETC. Should pull Icons out of EXEs. Should.>", strGames
    AddToString "//EXEPath <Path To GameEXE, NOT INCLUDING IT!>", strGames
    AddToString "//GameEXE <Actual Game EXE File>", strGames
    AddToString "//CommandArgs <Command Arguments For The Launch EXE>", strGames
    AddToString "// CMD Args - Automatically replaced: %SCREENX%, %SCREENY%, %TIME, %DATE%, %USERNAME%", strGames
    AddToString "//MonitorRunning <True/False>", strGames
    AddToString "//MonitorEXE <EXEName if different than GameEXE>", strGames
    AddToString "//GameUID <Generated by LanParty>", strGames
    'AddToString "//Installed <Generated from EXE>", strGames
    AddToString "//InstallerPath <Path To Installer EXE, relative>", strGames
    AddToString "//InstallFirst <True/False>", strGames
    AddToString "//GameType <0=Normal game/1=Non-game command, ie: ""EXPLORER http://google.com"" (opens Google)>", strGames
    'AddToString "//ConfigFile <PathToGameConfigFile_RELATIVE>", strGames
    'AddToString "//UserNameField <UserNameField in ConfigFile>", strGames
    'AddToString "//UserNameConfigMethod 0-X", strGames
    AddToString "", strGames
    
    For i = 1 To UBound(Game)
        GetSaveGameString i, strGames
    Next
    
    AddToString "// Games file generated on " & IIf(IsHost64Bit, "64-bit", "32-bit") & " " & NativeGetVersion & " //", strGames
    If FileExists(GameFile) Then FileCopy GameFile, GameFile & ".bak"
    WriteFile strGames, GameFile, True

Else

    AddToString "// Individual game file generated by LanParty v" & GetAppVersion & " //", strGames
    AddToString "", strGames
    
    If Game(IndexOnly).InstallFirst Then
        strFilePath = LCase$(Game(IndexOnly).InstallerPath)
    Else
        strFilePath = LCase$(Game(IndexOnly).EXEPath)
    End If
    
    For i = 1 To UBound(Game)   'Even though we're only doing one game, some things may be in the same directory!
        If Game(i).InstallFirst Then
            If LCase$(Game(i).InstallerPath) = strFilePath Then GetSaveGameString i, strGames
        Else
            If LCase$(Game(i).EXEPath) = strFilePath Then GetSaveGameString i, strGames
        End If
    Next
    
    If strFilePath = "" Then
        strFilePath = App.Path & "\"
    ElseIf Game(IndexOnly).InstallFirst Then
        strFilePath = LCase$(PathOfFile(strFilePath))
    Else
        strFilePath = LCase$(PathOfFile(strFilePath & Game(IndexOnly).GameEXE))
    End If

    strFilePath = strFilePath & "GameData.lan"
    
    If Left(strFilePath, 1) = "\" Then strFilePath = App.Path & strFilePath
    
    If InStr(1, LCase$(strFilePath), LCase$(App.Path)) = 0 Then AddUserChat "Unable to export " & Game(IndexOnly).Name, "System", False: Exit Sub
    AddToString "// Individual game file generated on " & IIf(IsHost64Bit, "64-bit", "32-bit") & " " & NativeGetVersion & " //", strGames
    WriteFile strGames, strFilePath, True
End If
End Sub

Public Function GetSaveGameString(Index As Integer, ByRef strGames As String)
Dim i As Long
    With Game(Index)
        'If LenB(.GameUID$) = 0 Then .GameUID = CalcGameUID(Index)
        If LenB(Game(Index).GameUID) > 0 Then
            AddToString "Name " & .Name, strGames
            AddToString "IconPath " & .IconPath, strGames
            AddToString "EXEPath " & .EXEPath, strGames
            AddToString "GameEXE " & .GameEXE, strGames
            If LenB(Game(Index).GameScript) > 0 Then
                AddToString "Script", strGames
                AddToString Game(Index).GameScript, strGames, False
                AddToString "End Script", strGames
            End If
            AddToString "CommandArgs " & .CommandArgs, strGames
            AddToString "MonitorRunning " & .MonitorRunning, strGames
            AddToString "MonitorEXE " & .MonitorEXE, strGames
            AddToString "GameUID " & .GameUID, strGames
            AddToString "InstallFirst " & .InstallFirst, strGames
            AddToString "InstallerPath " & .InstallerPath, strGames
            AddToString "GameType " & .GameType, strGames
            AddToString "MaxPlayers " & .MaxPlayers, strGames
            AddToString "", strGames
        End If
    End With

End Function

Public Sub InitializeGameArray(Optional blForce As Boolean = False)
        
    GameFile = App.Path & "\Games.txt"
        
    If blForce Or ((Not Game) = -1) Then
        SetStartupStatus "", "Loading games.."
        GetGamesFromText LoadFile(App.Path & "\Games.txt"), Game   'this will clear/initialize the Game UDT
    End If

'AddDebug "InitGameArray [DONE]"
End Sub

Public Function AddGamesToFrom(ByRef ToGames() As GameData, ByRef FromGames() As GameData)
    Dim i As Integer
    
    If ((Not FromGames) = -1) Then Exit Function        'If it's not initialized.. there's nothing in it. Let's exit.
    
    For i = 1 To UBound(FromGames)
        If GameIndexByUID(FromGames(i).GameUID) = -1 Then
            ReDim Preserve ToGames(UBound(ToGames) + 1)
                
                ToGames(UBound(ToGames)) = FromGames(i)
                
                'With ToGames(UBound(ToGames))
                '    .Name = fromgames(
                '    .CommandArgs
                '    .EXEPath
                '    .GameType
                '    .GameUID
                '    .IconPath
                '    .Installed
                '    .InstallerPath
                '    .InstallFirst
                '    .MaxPlayers
                '    .MonitorEXE
                '    .MonitorRunning
                '
                'End With
            
        End If
    Next

End Function

Public Function GetGamesFromText(strGames As String, ByRef TempGame() As GameData)
Dim i As Long, ii As Long
Dim Line As String
Dim lines() As String
Dim strSwitch As String
Dim strData As String
Dim GameIndex As Integer

ReDim TempGame(0)

    If LenB(strGames) > 0 Then
        lines = Split(strGames, vbNewLine)
        If UBound(lines) > 4 Then
    
            For i = 0 To UBound(lines)
                Line = Trim$(lines(i))
                
                If Not Left$(Line, 2) = "//" Then 'Next 'skip comments
                    If Not LenB(Line) < 1 Then
                        strSwitch = LCase$(Split(Line, " ")(0))
                        strData = Trim$(Right$(Line, Len(Line) - Len(strSwitch)))
                        
                        Select Case strSwitch
                        
                        Case "script"
                            
                            For ii = (i + 1) To UBound(lines)
                                If LCase$(Trim(lines(ii))) = "end script" Then Exit For
                                TempGame(GameIndex).GameScript = TempGame(GameIndex).GameScript & lines(ii) & vbCrLf
                            Next ii
                            i = ii      'continue reading the lines after the last GameScript line
                            
                        Case "name"
                        GameIndex = GameIndex + 1
                        
                        'redim the array. Redim preserve is super slow, unfortunately. I could write a value in the file that would be read
                        'before everything else and use that to initialize the array, but it's not a probelm for a few games at a time..
                        ReDim Preserve TempGame(GameIndex)
                        TempGame(GameIndex).Name = strData
                        
                        Case "commandargs"
                        TempGame(GameIndex).CommandArgs = strData
                        
                        Case "gameexe"
                        TempGame(GameIndex).GameEXE = strData

                        Case "gameuid"
                        TempGame(GameIndex).GameUID = strData
                        
                        Case "exepath"
                        TempGame(GameIndex).EXEPath = strData
                        
                        Case "monitorrunning"
                        TempGame(GameIndex).MonitorRunning = IIf(LCase$(strData) = "true", True, False)
                        
                        Case "monitorexe"
                        TempGame(GameIndex).MonitorEXE = strData
        
                        Case "iconpath"
                        TempGame(GameIndex).IconPath = strData
                        
                        Case "installerpath"
                        TempGame(GameIndex).InstallerPath = strData
                        
                        Case "installfirst"
                        TempGame(GameIndex).InstallFirst = IIf(LCase$(strData) = "true", True, False)
        
                        Case "gametype"
                        TempGame(GameIndex).GameType = CInt(strData)
                        
                        Case "maxplayers"
                        TempGame(GameIndex).MaxPlayers = CInt(strData)
                        
                        Case Else
                            AddDebug "Unknown case: " & Line, True
                        
                        End Select
                    End If
                End If
            Next i
        End If
    End If

CheckGamesExist

End Function

Public Function CheckGamesExist()
Dim i As Integer
    
    For i = 1 To UBound(Game)
        If FileExists(GetGameExePath(i)) Then
            Game(i).GameExists = True
        ElseIf FileExists(FixFilePath(Game(i).InstallerPath)) Then
            Game(i).GameExists = True
        End If
    Next i
End Function

Public Function NumGamesExist() As Integer
Dim i As Integer

For i = 1 To UBound(Game)
    If Game(i).GameExists Then NumGamesExist = NumGamesExist + 1
Next

End Function

Public Function LaunchGame(Optional GameIndex As Integer, Optional WithArgs As Boolean = True) As Long
Dim strRetPath() As String
Dim strReturn As String
If GameIndex = 0 Then GameIndex = CurrentGameIndex

If Game(GameIndex).GameType = 1 Then
    strRetPath = modScript.RunScriptSub(Game(GameIndex).GameScript, "OnCommandLaunch")
    If LenB(strRetPath(0)) = 0 Then strReturn = Game(GameIndex).GameEXE Else strReturn = strRetPath(0)
    ExecFile strReturn, GetGameArgs(GameIndex), , Game(GameIndex).EXEPath
    CheckMonitorGame GameIndex
Exit Function
End If

If Game(GameIndex).InstallFirst Then
    If Game(GameIndex).Installed = False Then
        'needs to install the game first
            If MsgBox("This game must be installed before launching." & vbNewLine & _
            "Would you like to begin the installation?" & vbNewLine & _
            "(If you've installed it already, right click its icon and choose ""Locate Game"")", vbYesNoCancel, "Installation Required") = vbYes Then
                strReturn = modScript.RunScriptSub(Game(GameIndex).GameScript, "OnGameInstall")
                InstallGame GameIndex, strReturn
            End If
        Exit Function
    Else
        If Not FileExists(GetGameExePath(GameIndex)) Then
            MsgBox "This game must be installed before launching." & vbNewLine & _
            "If you've installed it already, right click its icon and choose ""Locate Game""", vbExclamation, "Unable To Locate Game"
            Exit Function
        End If
    End If
End If
strReturn = modScript.RunScriptSub(Game(GameIndex).GameScript, "OnGamePath")
TrySetGamePath GameIndex, strReturn

    Dim GamePath As String
    GamePath = GetGameExePath(GameIndex)
    strReturn = modScript.RunScriptSub(Game(GameIndex).GameScript, "OnGameLaunch")
    If LenB(strReturn) = 0 Then strReturn = GamePath
    If LenB(GamePath) = 0 Then AddDebug "LaunchGame: GamePath is null":  Exit Function
    If WithArgs Then
        LaunchGame = ExecFile(strReturn, GetGameArgs(GameIndex), , Game(GameIndex).EXEPath)
    Else
        LaunchGame = ExecFile(strReturn, "", , Game(GameIndex).EXEPath)
    End If
    
    DoEvents
    
    If LaunchGame >= 32 Then If Settings.MinimizeAfterLaunch Then frmMain.WindowState = vbMinimized
    
    CheckMonitorGame GameIndex
    
    'AddDebug "LaunchGame: " & LaunchGame, True
End Function

Private Function TrySetGamePath(GameIndex As Integer, Optional strReturn As String = "")
    On Error GoTo oops
    
    If LenB(strReturn) = 0 Then strReturn = Game(GameIndex).EXEPath
    
    ChDir FullPathFromLocal(strReturn)
    AddDebug "Changing WorkingDir to: " & FullPathFromLocal(strReturn)
    Exit Function
    
oops:
    AddDebug "Unable to change WorkingDir to: " & FullPathFromLocal(strReturn)
    
End Function

Public Function StoppedPlaying(GameIndex As Integer)
'broadcast stopped playing
'also anything else
    CryptToAll NowPlayingPacket(0, Game(GameIndex).GameUID)
    AddUserChat "You've stopped playing: " & Game(GameIndex).Name, "System", False
    Settings.CurrentGame = 0
End Function

Public Function StartedPlaying(GameIndex As Integer)
'broadcast started playing game
If IsGameRunning(GameIndex) Then
    Settings.CurrentGame = GameIndex
    AddUserChat "You've started playing: " & Game(GameIndex).Name, "System", False
    CryptToAll NowPlayingPacket(1, Game(GameIndex).GameUID)
Else
    AddDebug "Unable to locate GameEXE: " & Game(GameIndex).GameEXE
End If

End Function

Public Function CheckMonitorGame(Optional GameIndex As Integer = 0)

If Settings.MonitorGame = False Then
    If Settings.CurrentGame > 0 Then StoppedPlaying Settings.CurrentGame
    Exit Function
End If

If GameIndex = 0 And Settings.CurrentGame = 0 Then 'if index is 0 and current game is 0

    Dim i As Integer
    For i = 1 To UBound(Game)
        If IsGameRunning(i) Then CheckMonitorGame (i): Exit Function
    Next i

    'Exit Function 'gtfo
End If

If GameIndex > 0 Then 'GameIndex = Settings.CurrentGame
    If Game(GameIndex).MonitorRunning = False Then 'if index > 0, but don't monitor exe..
        Exit Function 'gtfo
    End If
Else
    If Game(Settings.CurrentGame).MonitorRunning = False Then 'if index > 0, but don't monitor exe..
        Exit Function 'gtfo
    End If
End If

If Settings.CurrentGame = 0 Then
    'One is not running currently,
    'so it will be a new launch
    
    StartedPlaying GameIndex
    
Exit Function
End If

If Settings.CurrentGame = GameIndex Then
    'Same game is running.
    
    If IsGameRunning(GameIndex) Then
    
    Else
        StoppedPlaying GameIndex
    End If
Exit Function
End If

If IsGameRunning(Settings.CurrentGame) Then
    'we're launching a new game.. but our last game is running?
    If GameIndex > 0 Then
        StoppedPlaying Settings.CurrentGame
        StartedPlaying GameIndex
        Exit Function
    Else
        'The game is still running!
    End If
        
Else
    'Our last game isn't running, and we're launching a new game.
    StoppedPlaying Settings.CurrentGame
    If GameIndex > 0 Then StartedPlaying GameIndex
End If


End Function

Public Function GetGameExePath(GameIndex As Integer) As String
If GameIndex = -1 Then Exit Function
    If Len(Game(GameIndex).EXEPath$) > 0 Then
        GetGameExePath = FixFilePath(Game(GameIndex).EXEPath & "\" & Game(GameIndex).GameEXE)
    Else
        GetGameExePath = FixFilePath(Game(GameIndex).GameEXE)
    End If
End Function

Public Function GetGameArgs(GameIndex As Integer) As String
If GameIndex = -1 Then Exit Function
    If Len(Game(GameIndex).CommandArgs) > 0 Then
        GetGameArgs = DoReplaceArgs(Game(GameIndex).CommandArgs)
    End If
End Function

Public Function GetGameName(GameIndex As Integer) As String
    On Error Resume Next
    
    If GameIndex = -1 Then
        GetGameName = "Unknown Game"
        Exit Function
    End If
    
    GetGameName = Game(GameIndex).Name
End Function

Public Function CalcGameUID(GameIndex As Integer, Optional blForce As Boolean = False) As String

    If Not blForce Then If Len(Game(GameIndex).GameUID) > 0 Then CalcGameUID = Game(GameIndex).GameUID: Exit Function

    If blForce Then AddDebug "Force calculating GameUID.."

    If FileExists(GetGameExePath(GameIndex)) Then
        CalcGameUID = CalculateAdler(CRC32File(GetGameExePath(GameIndex)) & Game(GameIndex).Name & _
        Game(GameIndex).CommandArgs & Game(GameIndex).MonitorEXE)
    ElseIf Game(GameIndex).InstallFirst And FileExists(FixFilePath(Game(GameIndex).InstallerPath)) Then
        CalcGameUID = CalculateAdler(CRC32File(FixFilePath(Game(GameIndex).InstallerPath)) & Game(GameIndex).Name & _
        Game(GameIndex).CommandArgs & Game(GameIndex).MonitorEXE)
    Else
        CalcGameUID = CalculateAdler(Game(GameIndex).GameEXE & Game(GameIndex).GameType & Game(GameIndex).CommandArgs & Game(GameIndex).InstallerPath)
    End If
    
    'Not sure how or why this would happen, but at least it will allow them to save the game/command..
    'If LenB(CalcGameUID) = 0 Then CalcGameUID = GenUniqueKey(8)
    
    If IsNumeric(CalcGameUID) Then CalcGameUID = Format(Hex(CalcGameUID), "00000000")
    
    Do While Len(CalcGameUID) < 8
        CalcGameUID = "0" & CalcGameUID
    Loop
    
    
    
    If GameIndexByUID(CalcGameUID) > 0 Then
        AddDebug "*** Seriously? This just happened. Wtf."
        CalcGameUID = GenUniqueKey(8)
        If GameIndexByUID(CalcGameUID) > 0 Then
            AddDebug "*** Seriously? This just happened. Wtf."
            CalcGameUID = GenUniqueKey(8)
        End If
    End If
    
End Function

Public Function GameIndexByUID(GameUID As String) As Integer
    Dim i As Integer
    If LenB(GameUID) = 0 Then Exit Function
    For i = 1 To UBound(Game)
        If (LenB(Game(i).GameUID) > 0) And Game(i).GameUID = GameUID Then
            GameIndexByUID = i
            Exit Function
        End If
    Next i
    
    GameIndexByUID = -1
    
End Function

Public Function IsGameRunning(GameIndex As Integer) As Boolean
Dim strGame() As String

Dim cproc As clsProcess
Set cproc = New clsProcess

strGame = Split(Game(GameIndex).MonitorEXE, ";")

If UBound(strGame) > 0 Then

    Dim i As Integer
    
    For i = 0 To UBound(strGame)
        strGame(i) = Trim$(strGame(i))
        If Len(strGame(i)) > 0 Then
            If cproc.ProcessExists(strGame(i)) Then IsGameRunning = True: Exit Function
        End If
    Next i


Else
    IsGameRunning = cproc.ProcessExists(Game(GameIndex).MonitorEXE)
End If


    

End Function

Public Function CheckInstalled()

    Dim i As Integer
    For i = 1 To UBound(Game)
        If Game(i).InstallFirst Then
            If FileExists(GetGameExePath(i)) Then
                Game(i).Installed = True
            Else
                Game(i).Installed = False
                AddDebug "Game: " & GetGameName(i) & " not found installed."
            End If
        End If
    Next i

End Function

Public Function InstallGame(GameIndex As Integer, Optional strReturn As String = "") As Boolean
Dim idProg As Long, iExit As Long

If Len(strReturn) = 0 Then AddUserChat "InstallerPath is null.", "System", False: Exit Function

Dim strPath As String
strPath = FixFilePath(strReturn)

If Not FileExists(strPath) Then AddUserChat "InstallerPath cannot be located.", "System", False: Exit Function

idProg = Shell(strPath)
iExit = fWait(idProg)

InstallGame = iExit

If FileExists(GetGameExePath(GameIndex)) Then
    Game(GameIndex).Installed = iExit
Else
    LocateGame GameIndex
End If
'CheckInstalled

End Function

Public Sub LocateGame(GameIndex As Integer)
'on error resume next
Dim f As New frmLocateGame
Load f
f.Tag = GameIndex
f.Caption = "Locate Game - " & Game(GameIndex).Name
'f.LocateGame GameIndex
f.SetSearchFile Game(GameIndex).GameEXE
f.Visible = True
f.Show
Do While f.Visible = True
    Pause 10
Loop
If FileExists(Game(GameIndex).GameEXE) Then Game(GameIndex).Installed = True
Unload f

End Sub

'Public Function GetMyBitGameEXE(GameIndex As Integer) As String
'
'    If IsHost64Bit Then
'        If LenB(Game(GameIndex).GameEXE64Bit) = 0 Then
'            GetMyBitGameEXE = Game(GameIndex).GameEXE64Bit
'        Else
'            GetMyBitGameEXE = Game(GameIndex).GameEXE32Bit
'        End If
'    Else
'        GetMyBitGameEXE = Game(GameIndex).GameEXE32Bit
'    End If
'
'End Function


Function fWait(ByVal lProgID As Long) As Long
Dim lExitCode As Long, hdlProg As Long
hdlProg = OpenProcess(PROCESS_ALL_ACCESS, False, lProgID)
GetExitCodeProcess hdlProg, lExitCode
Do While lExitCode = STILL_ACTIVE&
DoEvents
GetExitCodeProcess hdlProg, lExitCode
Loop
CloseHandle hdlProg
fWait = lExitCode
End Function
